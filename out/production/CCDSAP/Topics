Table of Contents
 Chapter 0: How to use this book.
 Chapter 1: Introduction - Programming Overview
 Chapter 2: Algorithms Analysis
 Chapter 3: Approach to solve algorithm design problems
 Chapter 4: Abstract Data Type
 Chapter 5: Searching
 Chapter 6: Sorting
 Chapter 7: Linked List
 Chapter 8: Stack
 Chapter 9: Queue
 Chapter 10: Tree
 Chapter 11: Priority Queue
 Chapter 12: Hash-Table
 Chapter 13: Graphs
 Chapter 14: String Algorithms
 Chapter 15: Algorithm Design Techniques
 Chapter 16: Brute Force Algorithm
 Chapter 17: Greedy Algorithm
 Chapter 18: Divide & Conquer
 Chapter 19: Dynamic Programming
 Chapter 20: Backtracking
 Chapter 21: Complexity Theory
 Chapter 22: Interview Strategy
 Chapter 23: System Design




--------------------------------------------------
                    TREES 
--------------------------------------------------


Check two given binary trees are identical or not | Iterative & Recursive					
Calculate height of a binary tree | Iterative & Recursive					
Delete given Binary Tree | Iterative & Recursive					
Inorder Tree Traversal | Iterative & Recursive					
Preorder Tree Traversal | Iterative & Recursive					
Postorder Tree Traversal | Iterative & Recursive					
Level Order Traversal of Binary Tree					
Spiral Order Traversal of Binary Tree					
Reverse Level Order Traversal of Binary Tree					
Print all nodes of a given binary tree in specific order (ZIG ZAG)					
Print Left View of a Binary Tree					
Print Right View of a Binary Tree					
Print Bottom View of Binary Tree					
Print Top View of Binary Tree					
Find next node in same level for given node in a binary tree					
Check if given binary tree is complete binary tree or not					
Determine if given two nodes are cousins of each other					
Print cousins of given node in a binary tree					
In-place convert given binary tree to its sum tree					
Check if given binary tree is a sum tree or not					
Combinations of words formed by replacing given numbers with corresponding alphabets					
Determine if given binary tree is a subtree of another binary tree or not					
Find diameter of a binary tree					
Check if given binary Tree has symmetric structure or not					
Convert binary tree to its mirror					
Check if binary tree can be converted to another by doing any no. of swaps of left & right child					
Find Lowest Common Ancestor (LCA) of two nodes in a binary tree					
Print all paths from root to leaf nodes in given binary tree					
Find ancestors of given node in a Binary Tree					
Find the distance between given pairs of nodes in a binary tree					
Find Vertical Sum in a given Binary Tree					
Print nodes in vertical order of a given Binary Tree (Vertical Traversal)					
Find the diagonal sum of given binary tree					
Print Diagonal Traversal of Binary Tree					
Print corner nodes of every level in binary tree					
In-place convert convert given Binary Tree to Doubly Linked List					
Sink nodes containing zero to the bottom of the binary tree					
Convert given binary tree to full tree by removing half nodes					
Truncate given binary tree to remove nodes which lie on a path having sum less than K					
Find maximum sum root-to-leaf path in a binary tree					
Check if given binary tree is height balanced or not					
Convert normal binary tree to Left-child right-sibling binary tree					
Determine if given Binary Tree is a BST or not					
Convert a Binary Tree to BST by maintaining its original structure					
Invert given Binary Tree | Recursive and Iterative solution					
Print leaf to root path for every leaf node in a binary tree					
Find maximum width of given binary tree					
Build Binary Tree from given Parent array					
Find all nodes at given distance from leaf nodes in a binary tree					
Count all subtrees having same value of nodes in a binary tree					
Find Maximum Difference Between a Node and its Descendants in a Binary Tree					
Construct a Binary Tree from Ancestor Matrix					
Calculate height of a binary tree with leaf nodes forming a circular doubly linked list					